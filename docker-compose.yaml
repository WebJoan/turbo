services:
  db:
    image: postgres
    expose:
      - "5432"
    volumes:
      - ./data:/var/lib/postgresql/data
    env_file:
      - .env.backend
    #environment:
    #  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    #  POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 10

  api:
    command: bash -c "uv sync && uv run -- python manage.py migrate && uv run -- python manage.py runserver 0.0.0.0:8000"
    build:
      context: ./apps/backend
    expose:
      - "8000"
    volumes:
      - ./apps/backend:/app
    env_file:
      - .env.backend
    depends_on:
      db:
        condition: service_healthy

  langgraph-api:
    build:
      context: ./apps/langgraph-api
    expose:
      - "8080"
    env_file:
      - .env.agno
    environment:
      - PORT=8080
    depends_on:
      - api

  #pgvector:
  #  image: agnohq/pgvector:16
  #  restart: unless-stopped
  #  expose:
  #    - "5432"
  #  volumes:
  #    - pgdata:/var/lib/postgresql/data
  #  env_file:
  #    - .env.agno
  #  healthcheck:
  #    test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai}"]
  #    interval: 2s
  #    timeout: 2s
  #    retries: 10
#
  #with-agno:
  #  build:
  #    context: ./apps/with-agno
  #  expose:
  #    - "3000"  # Next.js UI
  #    - "8000"  # Python Agent
  #  volumes:
  #    - ./apps/with-agno:/app
  #  env_file:
  #    - .env.agno
  #  environment:
  #    - RUNTIME_ENV=dev
  #    - NODE_ENV=development
  #  command: bash -c "npm install && npm run dev"
  #  depends_on:
  #    pgvector:
  #      condition: service_healthy

#  web:
#    command: bash -c "pnpm install -r && pnpm --filter web dev"
#    build:
#      context: ./apps/frontend
#    volumes:
#      - ./apps/frontend:/app
#    expose:
#      - "3000"
#    env_file:
#      - .env.frontend
#    depends_on:
#      - api


  web:
    build:
      context: ./apps/ai-frontend
    volumes:
      - ./apps/ai-frontend:/app
    expose:
      - "3000"
    env_file:
      - .env.agno
    depends_on:
      - langgraph-api
      - api
  

  proxy:
    container_name: proxy
    build:
      context: ./apps/proxy
      dockerfile: Dockerfile.ce
    restart: always
    env_file:
      - .env.proxy
    depends_on:
      - web
      - api
      - langgraph-api
    ports:
      - "80:80"
      - "443:443"
    dns:
      - 1.1.1.1
      - 1.0.0.1
      - 8.8.8.8
    volumes:
      - ./apps/proxy/data:/data
      - ./apps/proxy/config:/config

volumes:
  pgdata: