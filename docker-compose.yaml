services:
  db:
    image: postgres
    expose:
      - "5432"
    volumes:
      - ./data:/var/lib/postgresql/data
    env_file:
      - .env.backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 10

  api:
    #command: bash -c "uv sync && uv run -- python manage.py migrate && uv run -- python manage.py runserver 0.0.0.0:8000"
    command: ./bin/docker-entrypoint-api.sh
    build:
      context: ./apps/backend
    expose:
      - "8000"
    volumes:
      - ./apps/backend:/app
      - mediafiles:/app/api/media
    env_file:
      - .env.backend
    depends_on:
      db:
        condition: service_healthy

  worker:
    container_name: bgworker
    build:
      context: ./apps/backend
    restart: always
    command: ./bin/docker-entrypoint-worker.sh
    env_file:
      - .env.backend
    depends_on:
      - api
      - db
      - redis
    volumes:
      - ./apps/backend:/app
      - mediafiles:/app/api/media

  beat-worker:
    container_name: beatworker
    build:
      context: ./apps/backend
    restart: always
    command: ./bin/docker-entrypoint-beat.sh
    env_file:
      - .env.backend
    depends_on:
      - api
      - db
      - redis
    volumes:
      - ./apps/backend:/app
      - mediafiles:/app/api/media

#  langgraph-api:
#    build:
#      context: ./apps/langgraph-api
#    expose:
#      - "8080"
#    env_file:
#      - .env.agno
#    environment:
#      - PORT=8080
#    depends_on:
#      - api

  pgvector:
    image: agnohq/pgvector:16
    restart: unless-stopped
    expose:
      - "5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - .env.agno
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ai}"]
      interval: 2s
      timeout: 2s
      retries: 10

#  web:
#    command: bash -c "pnpm install -r && pnpm --filter web dev"
#    build:
#      context: ./apps/frontend
#    volumes:
#      - ./apps/frontend:/app
#    expose:
#      - "3000"
#    env_file:
#      - .env.frontend
#    depends_on:
#      - api


  redis:
    container_name: redis
    image: valkey/valkey:7.2.5-alpine
    restart: always
    volumes:
      - redisdata:/data

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.13.6-management-alpine
    restart: always
    env_file:
      - .env.backend
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  meilisearch:
    container_name: meilisearch
    image: getmeili/meilisearch:v1.16.0
    restart: always
    env_file:
      - .env.backend
    volumes:
      - meilisearch_data:/data
    ports:
      - "7700:7700"

#  web:
#    build:
#      context: ./apps/ai-frontend
#    command: bash -lc "pnpm install && pnpm exec next dev --turbo --hostname 0.0.0.0"  
#    volumes:
#      - ./apps/ai-frontend:/app
#    expose:
#      - "3000"
#    env_file:
#      - .env.agno
#    environment:
#      - API_URL=http://api:8000
#    depends_on:
#      - langgraph-api
#      - api

  agno:
    build:
      context: ./apps/agno
    expose:
      - "8080"
    env_file:
      - .env.agno
    environment:
      - PORT=8080
    depends_on:
      - api

  web:
    build:
      context: ./apps/frontend
    command: bash -lc "pnpm install && pnpm exec next dev --turbo --hostname 0.0.0.0"  
    volumes:
      - ./apps/frontend:/app
    expose:
      - "3000"
    ports:
      - "3000:3000"
    env_file:
      - .env.agno
    environment:
      - API_URL=http://api:8000
      - NEXT_PUBLIC_AGNO_URL=http://agno:8080/agno-agent
    depends_on:
      - agno
      - api
  
  proxy:
    container_name: proxy
    build:
      context: ./apps/proxy
      dockerfile: Dockerfile.ce
    restart: always
    env_file:
      - .env.proxy
    depends_on:
      - web
      - api
      - agno
    ports:
      - "80:80"
      - "443:443"
    #dns:
    #  - 1.1.1.1
    #  - 1.0.0.1
    #  - 8.8.8.8
    volumes:
      - ./apps/proxy/data:/data
      - ./apps/proxy/config:/config
      - mediafiles:/mediafiles:ro

volumes:
  pgdata:
  redisdata:
  rabbitmq_data:
  meilisearch_data:
  mediafiles: