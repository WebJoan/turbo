"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—É–∂–¥–∞—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
"""
import asyncio
import json
from app.langgraph.reasoning_agent import reasoning_agent_graph

async def test_reasoning_agent():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—É–∂–¥–∞—é—â–∏–π –∞–≥–µ–Ω—Ç"""
    
    # –ü—Ä–∏–º–µ—Ä —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–∏
    test_messages = [
        {
            "role": "user",
            "content": [
                {
                    "type": "text", 
                    "text": "–ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –º–∏–∫—Ä–æ—Å—Ö–µ–º—É STM32 –æ—Ç ST Microelectronics –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ —É–º–Ω–æ–≥–æ –¥–æ–º–∞. –¢–∞–∫–∂–µ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ü–∏–π ST –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏."
                }
            ]
        }
    ]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ LangChain —Ñ–æ—Ä–º–∞—Ç
    from app.add_langgraph_route import convert_to_langchain_messages
    langchain_messages = convert_to_langchain_messages(test_messages)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        "configurable": {
            "system": """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Ä—ã–Ω–∫–∞–º.
–ü–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫.
–í—Å–µ–≥–¥–∞ —Ä–∞—Å—Å—É–∂–¥–∞–π –ø–æ—à–∞–≥–æ–≤–æ –∏ –æ–±—ä—è—Å–Ω—è–π —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è.
""",
            "frontend_tools": []
        }
    }
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—É–∂–¥–∞—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞...")
    print("=" * 60)
    
    step_count = 0
    async for chunk, metadata in reasoning_agent_graph.astream(
        {
            "messages": langchain_messages,
            "plan": [],
            "current_step": 0,
            "goal": "",
            "reasoning_history": [],
            "max_steps": 8
        },
        config,
        stream_mode="values"
    ):
        step_count += 1
        print(f"\nüìç –®–ê–ì {step_count}")
        print("-" * 30)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if chunk.get("plan"):
            print("üéØ –ü–õ–ê–ù:")
            for i, step in enumerate(chunk["plan"]):
                status = "‚úÖ" if i < chunk.get("current_step", 0) else "‚è≥"
                print(f"  {status} {step.step_number}. {step.description} ({step.action_type})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if chunk.get("messages"):
            last_message = chunk["messages"][-1]
            if hasattr(last_message, 'content'):
                content = last_message.content
                if content.strip():
                    print(f"\nüí¨ –û–¢–í–ï–¢: {content[:300]}{'...' if len(content) > 300 else ''}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
        if chunk.get("reasoning_history"):
            print(f"\nüß† –ò–°–¢–û–†–ò–Ø –†–ê–°–°–£–ñ–î–ï–ù–ò–ô ({len(chunk['reasoning_history'])} –∑–∞–ø–∏—Å–µ–π):")
            for reasoning in chunk["reasoning_history"][-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2
                print(f"  ‚Ä¢ {reasoning}")
        
        print("-" * 30)
    
    print(f"\nüèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {step_count} —à–∞–≥–æ–≤")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_reasoning_agent())
