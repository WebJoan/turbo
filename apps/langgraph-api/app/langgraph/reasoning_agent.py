from langchain_openai import ChatOpenAI
from langgraph.graph import StateGraph, END
from langgraph.prebuilt import ToolNode
from langchain_core.messages import SystemMessage, HumanMessage, AIMessage
from langgraph.errors import NodeInterrupt
from langchain_core.tools import BaseTool
from pydantic import BaseModel
from dotenv import load_dotenv
from typing import List, Literal
import os
from .tools import tools
from .state import AgentState, ReasoningState, PlanStep

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter
model = ChatOpenAI(
    model="google/gemini-2.5-flash",
    api_key=os.getenv("OPENROUTER_API_KEY"),
    base_url=os.getenv("OPENROUTER_API_BASE_URL"),
    temperature=0.7,
)

# PlanStep –∏ ReasoningState —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ state.py


def should_continue_reasoning(state: ReasoningState):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è—Ö –∞–≥–µ–Ω—Ç–∞"""
    messages = state["messages"]
    current_step = state.get("current_step", 0)
    plan = state.get("plan", [])
    max_steps = state.get("max_steps", 10)
    
    # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —à–∞–≥–æ–≤
    if current_step >= max_steps:
        return "respond"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞–Ω –∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –≤ —Ä–∞–º–∫–∞—Ö –ø–ª–∞–Ω–∞
    if plan and current_step < len(plan):
        current_action = plan[current_step]
        
        if current_action.action_type == "use_tool":
            return "tools"
        elif current_action.action_type == "think":
            return "think"
        else:
            return "respond"
    
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç tool_calls
    if messages and hasattr(messages[-1], 'tool_calls') and messages[-1].tool_calls:
        return "tools"
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–ª–∞–Ω–∞ –∏–ª–∏ –ø–ª–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
    if not plan or current_step >= len(plan):
        return "respond"
    
    return "think"


async def create_plan(state: ReasoningState, config):
    """–£–∑–µ–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏"""
    messages = state["messages"]
    system = config["configurable"]["system"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    planning_system_prompt = f"""
{system}

–ó–ê–î–ê–ß–ê –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:
–¢—ã –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ —à–∞–≥–∏ –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π:
1. "think" - –æ–±–¥—É–º–∞—Ç—å, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
2. "use_tool" - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–ø–æ–∏—Å–∫, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.)
3. "respond" - –¥–∞—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

–í–ê–ñ–ù–û: 
- –°–æ–∑–¥–∞–π –ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤
- –ù–µ –±–æ–ª–µ–µ 5-7 —à–∞–≥–æ–≤
- –î–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞ —É–∫–∞–∂–∏ —Ü–µ–ª—å –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
- –ù–∞—á–∏–Ω–∞–π —Å –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á–∏ ("think"), –∑–∞—Ç–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ("use_tool"), –ø–æ—Ç–æ–º –æ—Ç–≤–µ—Ç ("respond")

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–∏–º:
"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É:
1. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
2. –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
4. –î–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç

–ü–ª–∞–Ω:
–®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (think)
–®–∞–≥ 2: –ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö (use_tool: search_products_smart)
–®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (think)
–®–∞–≥ 4: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (respond)"
"""
    
    planning_messages = [SystemMessage(content=planning_system_prompt)] + messages
    
    response = await model.ainvoke(planning_messages)
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–ª–∞–Ω–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é structured output)
    plan_text = response.content
    
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
    plan = []
    lines = plan_text.split('\n')
    step_num = 1
    
    for line in lines:
        line = line.strip()
        if '—à–∞–≥' in line.lower() and ':' in line:
            if '–∞–Ω–∞–ª–∏–∑' in line.lower() or '–¥—É–º–∞—Ç—å' in line.lower() or '–ø–æ–Ω—è—Ç—å' in line.lower():
                plan.append(PlanStep(
                    step_number=step_num,
                    description=line,
                    action_type="think",
                    tool_name=None,
                    reasoning="–≠—Ç–∞–ø –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
                ))
            elif '–ø–æ–∏—Å–∫' in line.lower() or 'tool' in line.lower() or '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' in line.lower():
                tool_name = "search_products_smart"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
                if 'stock' in line.lower() or '–∞–∫—Ü–∏' in line.lower():
                    tool_name = "get_stock_price"
                elif '–º–µ—Ç–∞–ª–ª' in line.lower():
                    tool_name = "get_metal_price"
                elif '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç' in line.lower() or 'web' in line.lower():
                    tool_name = "search_duckduckgo"
                    
                plan.append(PlanStep(
                    step_number=step_num,
                    description=line,
                    action_type="use_tool",
                    tool_name=tool_name,
                    reasoning="–°–±–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
                ))
            elif '–æ—Ç–≤–µ—Ç' in line.lower() or 'respond' in line.lower():
                plan.append(PlanStep(
                    step_number=step_num,
                    description=line,
                    action_type="respond",
                    tool_name=None,
                    reasoning="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"
                ))
            step_num += 1
    
    # –ï—Å–ª–∏ –ø–ª–∞–Ω –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –¥–µ–ª–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
    if not plan:
        plan = [
            PlanStep(step_number=1, description="–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞", action_type="think", tool_name=None, reasoning=""),
            PlanStep(step_number=2, description="–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", action_type="use_tool", tool_name="search_products_smart", reasoning=""),
            PlanStep(step_number=3, description="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞", action_type="respond", tool_name=None, reasoning="")
        ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –∏ –æ—Ç–≤–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    return {
        "messages": [response],
        "plan": plan,
        "current_step": 0,
        "reasoning_history": [f"–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {len(plan)} —à–∞–≥–æ–≤"]
    }


async def think_step(state: ReasoningState, config):
    """–£–∑–µ–ª —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é"""
    messages = state["messages"]
    plan = state.get("plan", [])
    current_step = state.get("current_step", 0)
    reasoning_history = state.get("reasoning_history", [])
    system = config["configurable"]["system"]
    
    if plan and current_step < len(plan):
        current_action = plan[current_step]
        
        thinking_prompt = f"""
{system}

–ó–ê–î–ê–ß–ê –†–ê–ó–ú–´–®–õ–ï–ù–ò–Ø:
–°–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —à–∞–≥ {current_step + 1}: {current_action.description}

–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:
{chr(10).join(reasoning_history)}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø–æ–¥—É–º–∞–π –æ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö.
–ß—Ç–æ –º—ã —É–∂–µ –∑–Ω–∞–µ–º? –ß—Ç–æ –Ω—É–∂–Ω–æ –≤—ã—è—Å–Ω–∏—Ç—å? –ö–∞–∫–æ–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥?

–§–æ—Ä–º–∞—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π:
"ü§î –ê–ù–ê–õ–ò–ó –°–ò–¢–£–ê–¶–ò–ò:
- –ß—Ç–æ –º–Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–æ: ...
- –ß—Ç–æ –Ω—É–∂–Ω–æ –≤—ã—è—Å–Ω–∏—Ç—å: ...
- –ú–æ–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π: ...
- –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ..."
"""
    else:
        thinking_prompt = f"""
{system}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø–æ–¥—É–º–∞–π –æ —Ç–æ–º, –∫–∞–∫ –ª—É—á—à–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
"""
    
    thinking_messages = [SystemMessage(content=thinking_prompt)] + messages
    
    response = await model.ainvoke(thinking_messages)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    new_reasoning = f"–®–∞–≥ {current_step + 1}: {response.content[:200]}..."
    updated_reasoning_history = reasoning_history + [new_reasoning]
    
    return {
        "messages": [response],
        "current_step": current_step + 1,
        "reasoning_history": updated_reasoning_history
    }


async def call_model_with_reasoning(state: ReasoningState, config):
    """–í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
    messages = state["messages"]
    plan = state.get("plan", [])
    current_step = state.get("current_step", 0)
    reasoning_history = state.get("reasoning_history", [])
    system = config["configurable"]["system"]
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    enhanced_system_prompt = f"""
{system}

–ö–û–ù–¢–ï–ö–°–¢ –†–ê–°–°–£–ñ–î–ï–ù–ò–ô:
–ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(plan)} —à–∞–≥–æ–≤
–¢–µ–∫—É—â–∏–π —à–∞–≥: {current_step}
–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π:
{chr(10).join(reasoning_history[-3:])}  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
"""
    
    enhanced_messages = [SystemMessage(content=enhanced_system_prompt)] + messages
    
    from .agent import get_tool_defs
    model_with_tools = model.bind_tools(get_tool_defs(config))
    response = await model_with_tools.ainvoke(enhanced_messages)
    
    return {
        "messages": [response],
        "current_step": current_step + 1
    }


async def run_tools_with_context(state: ReasoningState, config, **kwargs):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
    from .agent import get_tools
    tool_node = ToolNode(get_tools(config))
    result = await tool_node.ainvoke(state, config, **kwargs)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    current_step = state.get("current_step", 0)
    reasoning_history = state.get("reasoning_history", [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    if result.get("messages"):
        tool_used = "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
        for msg in result["messages"]:
            if hasattr(msg, 'name'):
                tool_used = f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω {msg.name}"
                break
        
        reasoning_entry = f"–®–∞–≥ {current_step + 1}: {tool_used}"
        reasoning_history.append(reasoning_entry)
    
    return {
        **result,
        "current_step": current_step + 1,
        "reasoning_history": reasoning_history
    }


# –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Ä–∞—Å—Å—É–∂–¥–∞—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
def create_reasoning_graph():
    workflow = StateGraph(ReasoningState)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
    workflow.add_node("planning", create_plan)           # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    workflow.add_node("think", think_step)           # –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è
    workflow.add_node("agent", call_model_with_reasoning)  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–≥–µ–Ω—Ç
    workflow.add_node("tools", run_tools_with_context)     # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
    workflow.set_entry_point("planning")  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # –û—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º
    workflow.add_edge("planning", "think")
    
    # –û—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∫ –∞–≥–µ–Ω—Ç—É
    workflow.add_edge("think", "agent")
    
    # –û—Ç –∞–≥–µ–Ω—Ç–∞ - —É—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    workflow.add_conditional_edges(
        "agent",
        should_continue_reasoning,
        {
            "tools": "tools",
            "think": "think", 
            "respond": END
        }
    )
    
    # –û—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ –∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º
    workflow.add_edge("tools", "think")
    
    return workflow.compile()


# –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—É–∂–¥–∞—é—â–∏–π –≥—Ä–∞—Ñ
reasoning_agent_graph = create_reasoning_graph()
