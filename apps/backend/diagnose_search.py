#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤.
–ó–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑: uv run python diagnose_search.py
"""

import os
import sys
import django
from collections import Counter
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
#os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'api.settings.development')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'api.settings.production')

django.setup()

from goods.models import Product, Brand, ProductGroup
from meilisearch import Client
from django.conf import settings
from django.db.models import Q

def diagnose_database():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_products = Product.objects.count()
    total_brands = Brand.objects.count()
    total_groups = ProductGroup.objects.count()
    
    print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –±—Ä–µ–Ω–¥–æ–≤: {total_brands}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {total_groups}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–µ–Ω–¥—ã –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ Texas Instruments
    print(f"\nüè∑Ô∏è  –ü–æ–∏—Å–∫ –±—Ä–µ–Ω–¥–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö 'Texas' –∏–ª–∏ 'TI':")
    ti_brands = Brand.objects.filter(
        Q(name__icontains='texas') | 
        Q(name__icontains='ti') |
        Q(name__icontains='instrument')
    ).values_list('name', flat=True)
    
    if ti_brands:
        for brand in ti_brands:
            products_count = Product.objects.filter(brand__name=brand).count()
            print(f"   ‚Ä¢ {brand}: {products_count} —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        print("   ‚ùå –ë—Ä–µ–Ω–¥—ã –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ Texas Instruments –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã"
    print(f"\nüîß –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '–º–∏–∫—Ä–æ—Å—Ö–µ–º' –∏–ª–∏ 'chip':")
    chip_groups = ProductGroup.objects.filter(
        Q(name__icontains='–º–∏–∫—Ä–æ—Å—Ö–µ–º') |
        Q(name__icontains='–º–∏–∫—Ä–æ') |
        Q(name__icontains='chip') |
        Q(name__icontains='ic')
    ).values_list('name', flat=True)
    
    if chip_groups:
        for group in chip_groups:
            products_count = Product.objects.filter(subgroup__group__name=group).count()
            print(f"   ‚Ä¢ {group}: {products_count} —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        print("   ‚ùå –ì—Ä—É–ø–ø—ã –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –¢–æ–ø-10 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤
    print(f"\nüèÜ –¢–æ–ø-10 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–æ–≤–∞—Ä–æ–≤:")
    brand_stats = Product.objects.values('brand__name').annotate(
        count=models.Count('id')
    ).order_by('-count')[:10]
    
    for i, stat in enumerate(brand_stats, 1):
        brand_name = stat['brand__name'] or '–ë–µ–∑ –±—Ä–µ–Ω–¥–∞'
        print(f"   {i:2d}. {brand_name}: {stat['count']} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –¢–æ–ø-10 –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤
    print(f"\nüì¶ –¢–æ–ø-10 –≥—Ä—É–ø–ø —Ç–æ–≤–∞—Ä–æ–≤:")
    group_stats = Product.objects.values('subgroup__group__name').annotate(
        count=models.Count('id')
    ).order_by('-count')[:10]
    
    for i, stat in enumerate(group_stats, 1):
        group_name = stat['subgroup__group__name'] or '–ë–µ–∑ –≥—Ä—É–ø–ø—ã'
        print(f"   {i:2d}. {group_name}: {stat['count']} —Ç–æ–≤–∞—Ä–æ–≤")
    
    return total_products > 0

def diagnose_meilisearch():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Meilisearch –∏–Ω–¥–µ–∫—Å–∞."""
    
    print(f"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MEILISEARCH")
    print("=" * 50)
    
    try:
        client = Client(settings.MEILISEARCH_HOST, settings.MEILISEARCH_API_KEY)
        index = client.index("products")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
        stats = index.get_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞:")
        print(f"   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats.number_of_documents}")
        print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä: {stats.index_size} –±–∞–π—Ç")
        print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {getattr(stats, 'status', 'unknown')}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–µ–∫—Å–∞
        settings_info = index.get_settings()
        filterable = settings_info.get('filterableAttributes', [])
        searchable = settings_info.get('searchableAttributes', [])
        
        print(f"\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–µ–∫—Å–∞:")
        print(f"   ‚Ä¢ Filterable attributes: {len(filterable)} —à—Ç.")
        print(f"     {', '.join(filterable[:5])}{'...' if len(filterable) > 5 else ''}")
        print(f"   ‚Ä¢ Searchable attributes: {len(searchable)} —à—Ç.")
        print(f"     {', '.join(searchable[:5])}{'...' if len(searchable) > 5 else ''}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –±—Ä–µ–Ω–¥–∞–º
        if stats.number_of_documents > 0:
            print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤:")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
            try:
                all_results = index.search("", {"limit": 1000})
                brands_in_index = set()
                groups_in_index = set()
                
                for hit in all_results.hits:
                    brand = hit.get('brand_name')
                    group = hit.get('group_name')
                    if brand:
                        brands_in_index.add(brand)
                    if group:
                        groups_in_index.add(group)
                
                print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {len(brands_in_index)}")
                brands_list = sorted(brands_in_index)[:10]
                print(f"     –ü—Ä–∏–º–µ—Ä—ã: {', '.join(brands_list)}")
                
                print(f"   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –≤ –∏–Ω–¥–µ–∫—Å–µ: {len(groups_in_index)}")
                groups_list = sorted(groups_in_index)[:10]
                print(f"     –ü—Ä–∏–º–µ—Ä—ã: {', '.join(groups_list)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ Texas Instruments
                ti_variants = [b for b in brands_in_index if 'texas' in b.lower() or 'ti' in b.lower()]
                if ti_variants:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –±—Ä–µ–Ω–¥—ã TI: {', '.join(ti_variants)}")
                else:
                    print(f"   ‚ùå –ë—Ä–µ–Ω–¥—ã Texas Instruments –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å–µ")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–∫—Ä–æ—Å—Ö–µ–º—ã
                chip_variants = [g for g in groups_in_index if '–º–∏–∫—Ä–æ—Å—Ö–µ–º' in g.lower() or 'chip' in g.lower()]
                if chip_variants:
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω—ã –≥—Ä—É–ø–ø—ã –º–∏–∫—Ä–æ—Å—Ö–µ–º: {', '.join(chip_variants)}")
                else:
                    print(f"   ‚ùå –ì—Ä—É–ø–ø—ã –º–∏–∫—Ä–æ—Å—Ö–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∏–Ω–¥–µ–∫—Å–µ")
                    
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Meilisearch: {e}")
        return False

def suggest_solutions():
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º."""
    
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    print("=" * 50)
    
    print("1. üîÑ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é:")
    print("   make reindex-smart")
    
    print(f"\n2. üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã:")
    print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤ –∏ –≥—Ä—É–ø–ø –≤—ã—à–µ")
    
    print(f"\n3. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫:")
    print("   make test-search")
    
    print(f"\n4. üìù –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    print("   search_products_smart('STM32', brand='ST')")  
    print("   search_products_smart('—Ä–µ–∑–∏—Å—Ç–æ—Ä', category='–†–µ–∑–∏—Å—Ç–æ—Ä—ã')")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    
    print("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê –¢–û–í–ê–†–û–í")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_ok = diagnose_database()
    
    if not db_ok:
        print("\n‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Meilisearch
    meilisearch_ok = diagnose_meilisearch()
    
    if not meilisearch_ok:
        print("\n‚ùå Meilisearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
    suggest_solutions()

if __name__ == "__main__":
    from django.db import models
    main()

