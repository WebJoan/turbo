# Generated by Django 5.1.4 on 2025-09-16 17:32

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('goods', '0004_fileblob_productfile'),
    ]

    operations = [
        migrations.CreateModel(
            name='Competitor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=200, verbose_name='Название')),
                ('site_url', models.URLField(blank=True, max_length=500, verbose_name='Сайт')),
                ('b2b_site_url', models.URLField(blank=True, max_length=500, verbose_name='Сайт B2B')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
            ],
            options={
                'verbose_name': 'Конкурент',
                'verbose_name_plural': 'Конкуренты',
            },
        ),
        migrations.CreateModel(
            name='CompetitorProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('ext_id', models.CharField(blank=True, help_text='Идентификатор позиции у источника', max_length=100, verbose_name='Внешний ID у конкурента')),
                ('part_number', models.CharField(help_text='Обозначение позиции у конкурента', max_length=200, verbose_name='Part number / SKU')),
                ('brand_name', models.CharField(blank=True, max_length=200, verbose_name='Бренд')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Наименование')),
                ('tech_params', models.JSONField(blank=True, default=dict, verbose_name='Параметры')),
                ('competitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='stock.competitor', verbose_name='Конкурент')),
                ('mapped_product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='competitor_items', to='goods.product', verbose_name='Соответствующий наш товар')),
            ],
            options={
                'verbose_name': 'Позиция конкурента',
                'verbose_name_plural': 'Позиции конкурентов',
            },
        ),
        migrations.CreateModel(
            name='CompetitorPriceStockSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('collected_at', models.DateTimeField(db_index=True, verbose_name='Момент сбора')),
                ('price_ex_vat', models.DecimalField(blank=True, decimal_places=2, max_digits=14, null=True, verbose_name='Цена без НДС')),
                ('vat_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Доля, например 0.20', max_digits=4, null=True, verbose_name='Ставка НДС')),
                ('currency', models.CharField(default='RUB', max_length=10, verbose_name='Валюта')),
                ('stock_qty', models.IntegerField(blank=True, null=True, verbose_name='Количество на складе')),
                ('stock_status', models.CharField(choices=[('in_stock', 'В наличии'), ('low_stock', 'Мало'), ('out_of_stock', 'Нет в наличии'), ('on_request', 'Под заказ')], default='on_request', max_length=20, verbose_name='Статус наличия')),
                ('delivery_days_min', models.PositiveIntegerField(blank=True, null=True, verbose_name='Поставка, дней от')),
                ('delivery_days_max', models.PositiveIntegerField(blank=True, null=True, verbose_name='Поставка, дней до')),
                ('raw_payload', models.JSONField(blank=True, default=dict, verbose_name='Сырые данные')),
                ('competitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='stock.competitor', verbose_name='Конкурент')),
                ('competitor_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='stock.competitorproduct', verbose_name='Позиция конкурента')),
            ],
            options={
                'verbose_name': 'Снимок цены/склада конкурента',
                'verbose_name_plural': 'Снимки цен/складов конкурентов',
            },
        ),
        migrations.CreateModel(
            name='CompetitorProductMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('match_type', models.CharField(choices=[('exact', 'Точный'), ('equivalent', 'Эквивалент'), ('analog', 'Аналог'), ('similar', 'Похожий')], default='similar', max_length=20, verbose_name='Тип соответствия')),
                ('confidence', models.DecimalField(decimal_places=2, default=0.0, help_text='0.00–1.00, насколько уверенно сопоставление', max_digits=4, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='Уверенность')),
                ('notes', models.TextField(blank=True, verbose_name='Заметки')),
                ('competitor_product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='stock.competitorproduct', verbose_name='Позиция конкурента')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitor_matches', to='goods.product', verbose_name='Наш товар')),
            ],
            options={
                'verbose_name': 'Сопоставление с товаром',
                'verbose_name_plural': 'Сопоставления с товарами',
            },
        ),
        migrations.CreateModel(
            name='OurPriceHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('moment', models.DateTimeField(db_index=True, verbose_name='Момент изменения')),
                ('price_ex_vat', models.DecimalField(decimal_places=2, max_digits=14, verbose_name='Цена без НДС')),
                ('vat_rate', models.DecimalField(decimal_places=2, help_text='Доля, например 0.20', max_digits=4, verbose_name='Ставка НДС')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_history', to='goods.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'История цен (наши)',
                'verbose_name_plural': 'История цен (наши)',
                'ordering': ['-moment'],
            },
        ),
        migrations.AddIndex(
            model_name='competitorproduct',
            index=models.Index(fields=['competitor', 'part_number'], name='stock_compe_competi_ed55ef_idx'),
        ),
        migrations.AddConstraint(
            model_name='competitorproduct',
            constraint=models.UniqueConstraint(fields=('competitor', 'part_number'), name='uniq_competitor_part'),
        ),
        migrations.AddIndex(
            model_name='competitorpricestocksnapshot',
            index=models.Index(fields=['competitor', 'collected_at'], name='stock_compe_competi_2bf793_idx'),
        ),
        migrations.AddIndex(
            model_name='competitorpricestocksnapshot',
            index=models.Index(fields=['competitor_product', 'collected_at'], name='stock_compe_competi_3dde9f_idx'),
        ),
        migrations.AddConstraint(
            model_name='competitorpricestocksnapshot',
            constraint=models.UniqueConstraint(fields=('competitor_product', 'collected_at'), name='uniq_comp_snapshot_per_moment'),
        ),
        migrations.AddConstraint(
            model_name='competitorproductmatch',
            constraint=models.UniqueConstraint(fields=('competitor_product', 'product'), name='uniq_comp_match_pair'),
        ),
        migrations.AddIndex(
            model_name='ourpricehistory',
            index=models.Index(fields=['product', 'moment'], name='stock_ourpr_product_275761_idx'),
        ),
        migrations.AddConstraint(
            model_name='ourpricehistory',
            constraint=models.UniqueConstraint(fields=('product', 'moment'), name='uniq_our_price_per_moment'),
        ),
    ]
