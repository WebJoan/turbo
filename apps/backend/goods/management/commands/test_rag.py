"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —Å–∏—Å—Ç–µ–º—ã
"""
from django.core.management.base import BaseCommand, CommandError

from goods.rag_utils import get_rag_service, get_rag_chain


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤'
    
    def add_arguments(self, parser):
        parser.add_argument(
            'query',
            type=str,
            help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
        )
        parser.add_argument(
            '--limit',
            type=int,
            default=5,
            help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)',
        )
        parser.add_argument(
            '--semantic-ratio',
            type=float,
            default=0.7,
            help='–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ 0.0-1.0 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.7)',
        )
        parser.add_argument(
            '--threshold',
            type=float,
            default=0.3,
            help='–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ 0.0-1.0 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.3)',
        )
        parser.add_argument(
            '--with-llm',
            action='store_true',
            help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM)',
        )
        parser.add_argument(
            '--benchmark',
            action='store_true',
            help='–ü—Ä–æ–≤–µ—Å—Ç–∏ –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
        )
    
    def handle(self, *args, **options):
        query = options['query']
        
        self.stdout.write(
            self.style.SUCCESS(f'üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –ø–æ–∏—Å–∫ —Å –∑–∞–ø—Ä–æ—Å–æ–º: "{query}"')
        )
        
        try:
            rag_service = get_rag_service()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            self._check_system_status(rag_service)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞
            self._test_hybrid_search(rag_service, options)
            
            # –¢–µ—Å—Ç —Å LLM (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)
            if options['with_llm']:
                self._test_with_llm(query, options)
            
            # –ë–µ–Ω—á–º–∞—Ä–∫ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if options['benchmark']:
                self._run_benchmark(rag_service, query, options)
                
        except Exception as e:
            raise CommandError(f'–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}')
    
    def _check_system_status(self, rag_service):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        self.stdout.write('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å RAG —Å–∏—Å—Ç–µ–º—ã...')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Meilisearch
        try:
            health = rag_service.client.health()
            if health.get('status') == 'available':
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Meilisearch –¥–æ—Å—Ç—É–ø–µ–Ω')
                )
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå Meilisearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                )
                return False
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Meilisearch: {e}')
            )
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
        try:
            index = rag_service.client.index(rag_service.index_name)
            stats = index.get_stats()
            doc_count = stats.number_of_documents
            
            if doc_count > 0:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –ò–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç {doc_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤')
                )
            else:
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç')
                )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞: {e}')
            )
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–±–µ–¥–µ—Ä–∞
        try:
            test_embedding = rag_service.embedder.embed_text("—Ç–µ—Å—Ç")
            if len(test_embedding) > 0:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ HuggingFace —ç–º–±–µ–¥–µ—Ä –≥–æ—Ç–æ–≤ (—Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(test_embedding)})')
                )
            else:
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —ç–º–±–µ–¥–µ—Ä–æ–º')
                )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —ç–º–±–µ–¥–µ—Ä–∞: {e}')
            )
            return False
        
        return True
    
    def _test_hybrid_search(self, rag_service, options):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫"""
        query = options['query']
        limit = options['limit']
        semantic_ratio = options['semantic_ratio']
        threshold = options['threshold']
        
        self.stdout.write('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫...')
        self.stdout.write(f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: limit={limit}, semantic_ratio={semantic_ratio}, threshold={threshold}')
        
        try:
            import time
            start_time = time.time()
            
            results = rag_service.hybrid_search(
                query=query,
                limit=limit,
                semantic_ratio=semantic_ratio,
                ranking_score_threshold=threshold
            )
            
            search_time = time.time() - start_time
            
            if results:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ {search_time:.3f} —Å–µ–∫')
                )
                
                self.stdout.write('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:')
                for i, result in enumerate(results, 1):
                    self.stdout.write(
                        f'  {i}. [{result.ext_id}] {result.name}'
                    )
                    self.stdout.write(
                        f'     –ë—Ä–µ–Ω–¥: {result.brand_name} | –ì—Ä—É–ø–ø–∞: {result.group_name} > {result.subgroup_name}'
                    )
                    self.stdout.write(
                        f'     –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.relevance_score:.3f} | –ú–µ–Ω–µ–¥–∂–µ—Ä: {result.product_manager_name}'
                    )
                    
                    if result.tech_params:
                        tech_preview = str(result.tech_params)[:100] + '...' if len(str(result.tech_params)) > 100 else str(result.tech_params)
                        self.stdout.write(f'     –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {tech_preview}')
                    
                    if result.description:
                        desc_preview = result.description[:100] + '...' if len(result.description) > 100 else result.description
                        self.stdout.write(f'     –û–ø–∏—Å–∞–Ω–∏–µ: {desc_preview}')
                    
                    self.stdout.write('')  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                
                # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context = rag_service.get_context_for_llm(results)
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM —Å–æ–∑–¥–∞–Ω ({len(context)} —Å–∏–º–≤–æ–ª–æ–≤)')
                )
                
            else:
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}')
            )
    
    def _test_with_llm(self, query, options):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç RAG —Å LLM"""
        self.stdout.write('\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG —Å LLM...')
        
        try:
            rag_chain = get_rag_chain()
            
            import time
            start_time = time.time()
            
            result = rag_chain.search_and_answer(
                question=query,
                search_limit=options['limit'],
                semantic_ratio=options['semantic_ratio']
            )
            
            llm_time = time.time() - start_time
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {llm_time:.3f} —Å–µ–∫')
            )
            
            self.stdout.write('\nüí¨ –û—Ç–≤–µ—Ç LLM:')
            self.stdout.write('-' * 50)
            self.stdout.write(result['answer'])
            self.stdout.write('-' * 50)
            
            self.stdout.write(f'\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(result["products"])}')
            
        except Exception as e:
            self.stdout.write(
                self.style.WARNING(f'‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {e}')
            )
    
    def _run_benchmark(self, rag_service, query, options):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.stdout.write('\n‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...')
        
        import time
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            query,
            '—Ä–µ–∑–∏—Å—Ç–æ—Ä 10 –∫–û–º',
            '–º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä ARM',
            '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä 100 –º–∫–§',
            '—Å–≤–µ—Ç–æ–¥–∏–æ–¥ –∫—Ä–∞—Å–Ω—ã–π',
        ]
        
        total_time = 0
        successful_searches = 0
        
        for i, test_query in enumerate(test_queries, 1):
            try:
                start_time = time.time()
                
                results = rag_service.hybrid_search(
                    query=test_query,
                    limit=options['limit'],
                    semantic_ratio=options['semantic_ratio'],
                    ranking_score_threshold=options['threshold']
                )
                
                search_time = time.time() - start_time
                total_time += search_time
                successful_searches += 1
                
                self.stdout.write(
                    f'  {i}. "{test_query}" -> {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ {search_time:.3f} —Å–µ–∫'
                )
                
            except Exception as e:
                self.stdout.write(
                    f'  {i}. "{test_query}" -> –û—à–∏–±–∫–∞: {e}'
                )
        
        if successful_searches > 0:
            avg_time = total_time / successful_searches
            self.stdout.write(
                self.style.SUCCESS(f'\nüìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {avg_time:.3f} —Å–µ–∫')
            )
            self.stdout.write(
                self.style.SUCCESS(f'üìà –£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤: {successful_searches}/{len(test_queries)}')
            )
        else:
            self.stdout.write(
                self.style.ERROR('‚ùå –í—Å–µ –ø–æ–∏—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π')
            )
