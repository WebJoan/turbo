"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã
"""
import time
from typing import Dict, Any

from django.core.management.base import BaseCommand, CommandError
from django.conf import settings

from goods.models import Product
from goods.rag_utils import MeilisearchRAGService, get_rag_service
from goods.indexers import ProductIndexer


class Command(BaseCommand):
    help = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--setup-embedder',
            action='store_true',
            help='–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–µ—Ä–∞ –≤ Meilisearch',
        )
        parser.add_argument(
            '--reindex',
            action='store_true',
            help='–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π RAG',
        )
        parser.add_argument(
            '--test-search',
            action='store_true',
            help='–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        )
        parser.add_argument(
            '--batch-size',
            type=int,
            default=100,
            help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)',
        )
        parser.add_argument(
            '--test-query',
            type=str,
            default='—Ä–µ–∑–∏—Å—Ç–æ—Ä',
            help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: "—Ä–µ–∑–∏—Å—Ç–æ—Ä")',
        )
    
    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤')
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å RAG
            rag_service = get_rag_service()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Meilisearch
            self._check_meilisearch_connection(rag_service)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–º–±–µ–¥–µ—Ä–∞
            if options['setup_embedder']:
                self._setup_embedder(rag_service)
            
            # –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            if options['reindex']:
                self._reindex_products(options['batch_size'])
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            if options['test_search']:
                self._test_search(rag_service, options['test_query'])
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!')
            )
            
        except Exception as e:
            raise CommandError(f'–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã: {str(e)}')
    
    def _check_meilisearch_connection(self, rag_service: MeilisearchRAGService):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Meilisearch"""
        self.stdout.write('üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Meilisearch...')
        
        try:
            health = rag_service.client.health()
            if health.get('status') == 'available':
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Meilisearch –¥–æ—Å—Ç—É–ø–µ–Ω: {settings.MEILISEARCH_HOST}')
                )
            else:
                raise CommandError(f'‚ùå Meilisearch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health}')
        except Exception as e:
            raise CommandError(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Meilisearch: {str(e)}')
    
    def _setup_embedder(self, rag_service: MeilisearchRAGService):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–µ—Ä–∞"""
        self.stdout.write('‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–º–±–µ–¥–µ—Ä–∞...')
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å HuggingFace –º–æ–¥–µ–ª–∏
            self.stdout.write('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º HuggingFace –º–æ–¥–µ–ª—å...')
            test_embedding = rag_service.embedder.embed_text("—Ç–µ—Å—Ç")
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {len(test_embedding)}')
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —ç–º–±–µ–¥–µ—Ä –≤ Meilisearch
            rag_service.setup_embedder_config()
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
            )
            
        except Exception as e:
            raise CommandError(f'‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–±–µ–¥–µ—Ä–∞: {str(e)}')
    
    def _reindex_products(self, batch_size: int):
        """–ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã"""
        self.stdout.write(f'üîÑ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã (–±–∞—Ç—á–∞–º–∏ –ø–æ {batch_size})...')
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
            total_products = Product.objects.count()
            self.stdout.write(f'üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {total_products}')
            
            if total_products == 0:
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
                )
                return
            
            # –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∞—Ç–æ–º–∞—Ä–Ω–æ
            self.stdout.write('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–æ–º–∞—Ä–Ω—É—é –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤...')
            try:
                ProductIndexer.index_all_atomically()
                processed = total_products
                self.stdout.write('‚úÖ –ê—Ç–æ–º–∞—Ä–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
            except Exception as e:
                self.stdout.write(
                    self.style.WARNING(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—Ç–æ–º–∞—Ä–Ω–æ–π –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {str(e)}')
                )
                self.stdout.write('üîÑ –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å—Ç—Ä–æ—á–Ω—É—é –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é...')
                
                # Fallback: –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –±–∞—Ç—á–∞–º–∏ —á–µ—Ä–µ–∑ query
                processed = 0
                for start in range(0, total_products, batch_size):
                    try:
                        end = min(start + batch_size, total_products)
                        product_ids = list(Product.objects.all()[start:end].values_list('id', flat=True))
                        
                        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –±–∞—Ç—á —á–µ—Ä–µ–∑ Query
                        from django.db.models import Q
                        ProductIndexer.index_from_query(Q(pk__in=product_ids))
                        
                        processed += len(product_ids)
                        if processed % (batch_size * 5) == 0:
                            self.stdout.write(f'üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}/{total_products}')
                        
                    except Exception as batch_e:
                        self.stdout.write(
                            self.style.WARNING(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞—Ç—á–∞ {start}-{end}: {str(batch_e)}')
                        )
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                    time.sleep(0.5)
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {processed}/{total_products}')
            )
            
        except Exception as e:
            raise CommandError(f'‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {str(e)}')
    
    def _test_search(self, rag_service: MeilisearchRAGService, query: str):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
        self.stdout.write(f'üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –∑–∞–ø—Ä–æ—Å–æ–º: "{query}"')
        
        try:
            # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            results = rag_service.hybrid_search(
                query=query,
                limit=5,
                semantic_ratio=0.7
            )
            
            if results:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(results)}')
                )
                
                for i, result in enumerate(results, 1):
                    self.stdout.write(
                        f'  {i}. {result.name} ({result.brand_name}) - '
                        f'—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.relevance_score:.3f}'
                    )
            else:
                self.stdout.write(
                    self.style.WARNING('‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
                )
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è LLM
            if results:
                context = rag_service.get_context_for_llm(results)
                context_length = len(context)
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM: {context_length} —Å–∏–º–≤–æ–ª–æ–≤')
                )
                
                if context_length > 0:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    preview = context[:200] + '...' if len(context) > 200 else context
                    self.stdout.write(f'üìÑ –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n{preview}')
                    
        except Exception as e:
            raise CommandError(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞: {str(e)}')
    
    def _get_system_stats(self, rag_service: MeilisearchRAGService) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        stats = {
            'meilisearch_connected': False,
            'index_exists': False,
            'total_documents': 0,
            'embedder_ready': False
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Meilisearch
            health = rag_service.client.health()
            stats['meilisearch_connected'] = health.get('status') == 'available'
            
            if stats['meilisearch_connected']:
                try:
                    index = rag_service.client.index(rag_service.index_name)
                    index_stats = index.get_stats()
                    stats['index_exists'] = True
                    stats['total_documents'] = index_stats.number_of_documents
                except:
                    pass
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–±–µ–¥–µ—Ä–∞
            try:
                test_embedding = rag_service.embedder.embed_text("—Ç–µ—Å—Ç")
                stats['embedder_ready'] = len(test_embedding) > 0
            except:
                pass
                
        except:
            pass
        
        return stats
